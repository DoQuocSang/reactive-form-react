import {
  Check,
  CheckCircle2,
  ChevronDown,
  CloudUpload,
  DollarSign,
  Image,
  XIcon,
} from "lucide-react";
import VariantTable from "../tables/VariantTable.component";
import {
  autoAdjustValidValueForNumberInput,
  preventInvalidValueForNumberInput,
} from "../../helper/numberInput.helper";
import { BRANDS } from "../../data/brands.data";
import { TYPES } from "../../data/types.data";
import { TAGS } from "../../data/tags.data";
import UploadFilePreview from "../upload-file/UploadFilePreview.component";
import { useProduct } from "../../hooks/useProduct";
import ErrorMessage, {
  type ValidatorType,
} from "../validate/ErrorMessage.component";
import { autoGenerateDiscountCodeForTextInput } from "../../helper/textInput.helper";
import FormDataPopUp from "../pop-up/FormDataPopUp.component";
interface IProductFormProps {
  productId: string;
}

export default function ProductForm({ productId }: IProductFormProps) {
  const {
    useUrl,
    errors,
    toggleUseURL,
    register,
    handleSubmit,
    productData,
    discount,
    priceRange,
    fields,
    inputValue,
    setInputValue,
    handleKeyDown,
    handleDelete,
    onSubmit,
    getValues,
    setValue,
    setProductData,
    isShowPopup,
  } = useProduct(productId);

  return (
    <main className="min-h-screen bg-gray-50 flex flex-col justify-center py-16">
      <div className="relative py-3 w-full max-w-screen-md sm:max-w-xl sm:mx-auto">
        <div className="relative px-6 pt-6 pb-0 bg-white mx-8 md:mx-0 shadow rounded-lg sm:px-10 sm:pt-10 sm:pb-6">
          <div className="w-full mx-auto">
            <div className="flex items-center space-x-5">
              <div className="h-14 w-14 bg-yellow-200 rounded-full flex flex-shrink-0 justify-center items-center text-yellow-500 text-2xl font-mono">
                i
              </div>
              <div className="block pl-2 font-semibold text-xl self-start text-gray-700">
                <h2 className="leading-relaxed">Product information</h2>
                <p className="text-sm text-gray-500 font-normal leading-relaxed">
                  Fill out the sections below
                </p>
              </div>
            </div>
            <form onSubmit={handleSubmit(onSubmit)}>
              <div className="py-8 text-base leading-6 space-y-4 text-gray-700 sm:leading-7">
                {/* --- Name --- */}
                <div className="flex flex-col gap-2">
                  <label className="leading-loose text-slate-700 font-medium">
                    Name
                  </label>
                  <input
                    {...register("name", {
                      required: true,
                      minLength: 5,
                      maxLength: 20,
                    })}
                    type="text"
                    className="pb-2 focus:outline-none border-b focus:border-b-2 border-gray-300 focus:border-teal-500 transition duration-100 ease-in-out"
                    placeholder="Type name"
                  />
                  {errors.name && (
                    <ErrorMessage type={errors.name?.type as ValidatorType} />
                  )}
                </div>

                {/* --- Brand --- */}
                <div className="flex flex-col gap-2">
                  <label htmlFor="brand" className="font-semibold">
                    Brand
                  </label>
                  <div className="relative w-full">
                    <select
                      {...register("brand", {
                        required: true,
                      })}
                      name="brand"
                      id="brand"
                      className="px-4 py-2 w-full appearance-none text-slate-700 focus:outline-none rounded-lg border border-gray-300 focus:border-2 focus:border-teal-500 focus:rounded-md transition duration-100 ease-in-out"
                    >
                      <option value="">Choose a brand</option>
                      {BRANDS.map((brand) => {
                        return (
                          <option key={brand.id} value={brand.value}>
                            {brand.label}
                          </option>
                        );
                      })}
                    </select>

                    <ChevronDown
                      size={20}
                      className="text-slate-500 absolute top-1/2 right-2 transform -translate-y-1/2 pointer-events-none"
                    />
                  </div>
                  {errors.brand && (
                    <ErrorMessage type={errors.brand?.type as ValidatorType} />
                  )}
                </div>

                {/* --- Thumbnail --- */}
                <div className="flex flex-col">
                  <div className="flex items-center justify-between">
                    <label className="leading-loose text-slate-700 font-medium">
                      Product Thumbnail
                    </label>
                    <div className="flex items-center gap-2">
                      <span className="ml-3 text-sm text-slate-700">
                        Use URL
                      </span>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          className="sr-only peer"
                          onClick={toggleUseURL}
                        />
                        <div
                          className="w-10 h-5 bg-slate-200 rounded-full peer peer-checked:bg-teal-500 
                            after:content-[''] after:absolute after:top-[2px] after:left-[2px] 
                            after:bg-white after:rounded-full after:h-4 after:w-4 
                            after:transition-all peer-checked:after:translate-x-5"
                        ></div>
                      </label>
                    </div>
                  </div>

                  {useUrl ? (
                    <div className="relative">
                      <input
                        type="url"
                        className="w-full pl-8 py-2 focus:outline-none border-b focus:border-b-2 border-gray-300 focus:border-teal-500 transition duration-100 ease-in-out"
                        placeholder="Type product url"
                      />
                      <Image
                        size={20}
                        className="absolute top-1/2 left-4 transform -translate-1/2 text-slate-500"
                      />
                    </div>
                  ) : (
                    <div className="mt-2 flex items-center justify-center w-full">
                      <label
                        htmlFor="images"
                        className="flex flex-col items-center justify-center w-full h-64 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600"
                      >
                        <div className="flex flex-col items-center justify-center pt-5 pb-6">
                          <CloudUpload
                            size={30}
                            className="text-slate-500 mb-2"
                          />
                          <p className="mb-2 text-sm text-gray-500 dark:text-gray-400">
                            <span className="font-semibold">
                              Click to upload
                            </span>{" "}
                            or drag and drop
                          </p>
                          <p className="text-xs text-gray-500 dark:text-gray-400">
                            SVG, PNG, JPG or GIF (MAX. 800x400px)
                          </p>
                        </div>
                        <input
                          id="images"
                          multiple
                          type="file"
                          accept="image/gif, image/jpeg, image/png, image/jpg"
                          className="hidden"
                        />
                      </label>
                    </div>
                  )}
                </div>

                {productData.images.length > 0 && (
                  <div className="grid grid-cols-4 gap-4">
                    {productData.images.map((file) => {
                      return <UploadFilePreview key={file.id} file={file} />;
                    })}
                  </div>
                )}

                {/* --- Type --- */}
                <div className="flex flex-col gap-2">
                  <label htmlFor="brand" className="font-semibold">
                    Type
                  </label>
                  <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-2">
                    {TYPES.map((type) => {
                      return (
                        <label key={type.id}>
                          <input
                            {...register("type", {
                              required: true,
                            })}
                            type="radio"
                            value={type.value}
                            className="peer hidden"
                            name="type"
                          />
                          <div className="hover:bg-gray-50 flex items-center justify-between px-4 py-2 border-2 rounded-lg cursor-pointer text-sm border-gray-200 group peer-checked:border-blue-500">
                            <h2 className="font-medium text-slate-700">
                              {type.label}
                            </h2>
                            <CheckCircle2
                              size={20}
                              className="text-blue-500 invisible group-[.peer:checked+&]:visible"
                            />
                          </div>
                        </label>
                      );
                    })}
                  </div>
                  {errors.type && (
                    <ErrorMessage type={errors.type?.type as ValidatorType} />
                  )}
                </div>

                {/* --- Price --- */}
                <div className="flex flex-col gap-2">
                  <label className="leading-loose text-slate-700 font-medium">
                    Price
                  </label>
                  <div className="relative">
                    <input
                      {...register("price", {
                        required: true,
                        min: priceRange.min,
                        max: priceRange.max,
                      })}
                      type="number"
                      placeholder="0.00"
                      min={priceRange.min}
                      max={priceRange.max}
                      onKeyDown={preventInvalidValueForNumberInput}
                      step={1}
                      className="py-2 pl-8 w-full focus:outline-none border-b focus:border-b-2 border-gray-300 focus:border-teal-500 transition duration-100 ease-in-out"
                    />
                    <DollarSign
                      size={20}
                      className="absolute top-1/2 left-4 transform -translate-1/2 text-slate-500"
                    />
                  </div>
                  {errors.price && (
                    <div className="flex items-center justify-between">
                      <ErrorMessage
                        type={errors.price?.type as ValidatorType}
                      />
                      <button
                      type="button"
                        onClick={() =>
                          autoAdjustValidValueForNumberInput(
                            getValues,
                            setValue,
                            priceRange,
                            "price"
                          )
                        }
                        className="px-2 py-1 rounded-lg bg-amber-400 text-white text-xs"
                      >
                        Fix input
                      </button>
                    </div>
                  )}
                </div>

                {/* --- Tag --- */}
                <div className="flex flex-col gap-2">
                  <label className="leading-loose text-slate-700 font-medium">
                    Tag
                  </label>
                  <input
                    list="tags"
                    type="text"
                    className="pb-2 focus:outline-none border-b focus:border-b-2 border-gray-300 focus:border-teal-500 transition duration-100 ease-in-out"
                    placeholder="Type tag"
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyDown={handleKeyDown}
                  />
                  <datalist id="tags">
                    {TAGS.map((tag) => {
                      return <option key={tag.id} value={tag.name} />;
                    })}
                  </datalist>
                  <div className="flex items-center gap-2 flex-wrap">
                    {fields.map((field, index) => (
                      <div
                        key={field.id}
                        className="flex justify-center items-center gap-1 px-2.5 py-1.5 bg-blue-100 text-blue-700 rounded-lg text-xs"
                      >
                        <p className="leading-none">{field.name}</p>
                        <button
                          type="button"
                          onClick={() => handleDelete(index)}
                        >
                          <XIcon size={10} />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* --- Description --- */}
                <div className="flex flex-col gap-2">
                  <label className="leading-loose text-slate-700 font-medium">
                    Description
                  </label>
                  <textarea
                    {...register("description")}
                    className="px-4 py-2 rounded-lg focus:outline-none border focus:border-2 border-gray-300 focus:border-teal-500 transition duration-100 ease-in-out"
                    placeholder="Optional"
                    rows={3}
                  />
                </div>

                {/* --- Discount --- */}
                <div className="flex flex-col gap-2">
                  <div className="flex items-center justify-between">
                    <label className="leading-loose text-slate-700 font-medium">
                      Discount
                    </label>
                    <p className="text-slate-700 mx-2 text-sm px-2 py-1 bg-slate-200 rounded-md">
                      {discount}%
                    </p>
                  </div>

                  <input
                    {...register("offer.percent")}
                    type="range"
                    min="0"
                    max="100"
                    step="1"
                    value={discount}
                    className="w-full h-2"
                  />
                </div>

                {/* --- Discount code --- */}
                <div className="flex flex-col gap-2">
                  <label className="leading-loose text-slate-700 font-medium">
                    Discount code
                  </label>
                  <input
                    {...register("offer.discountCode", {
                      minLength: 5,
                      maxLength: 10,
                      pattern: /^SDQ-[a-zA-Z0-9]+$/gi,
                    })}
                    type="text"
                    className="pb-2 focus:outline-none border-b focus:border-b-2 border-gray-300 focus:border-teal-500 transition duration-100 ease-in-out"
                    placeholder="Type name"
                  />
                  {errors.offer?.discountCode && (
                    <div className="flex items-center justify-between">
                      <ErrorMessage
                        type={errors.offer?.discountCode?.type as ValidatorType}
                      />

                      <button
                      type="button"
                        onClick={() =>
                          autoGenerateDiscountCodeForTextInput(
                            setValue,
                            10,
                            "offer.discountCode"
                          )
                        }
                        className="px-2 py-1 rounded-lg bg-amber-400 text-white text-xs"
                      >
                        Fix input
                      </button>
                    </div>
                  )}
                </div>

                {/* --- Offer --- */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="flex flex-col gap-2">
                    <label className="leading-loose text-slate-700 font-medium">
                      Offer start
                    </label>
                    <input
                      {...register("offer.start")}
                      type="date"
                      className="px-4 py-2 border focus:ring-gray-500 focus:border-teal-500 focus:border-2  w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600"
                    />
                  </div>
                  <div className="flex flex-col gap-2">
                    <label className="leading-loose text-slate-700 font-medium">
                      Offer end
                    </label>
                    <input
                      {...register("offer.end")}
                      type="date"
                      className="px-4 py-2 border focus:ring-gray-500 focus:border-teal-500 focus:border-2  w-full sm:text-sm border-gray-300 rounded-md focus:outline-none text-gray-600"
                    />
                  </div>
                </div>

                <VariantTable productId={productId} />

                {/* --- Visible --- */}
                <div className="flex items-center justify-end gap-2">
                  <label className="order-2 leading-loose text-slate-700 font-medium">
                    Visible
                  </label>
                  <div className="w-5 h-5 relative">
                    <input
                      {...register("visible")}
                      name="visible"
                      type="checkbox"
                      id="visible"
                      checked={productData.visible}
                      onChange={(e) =>
                        setProductData((prev) => ({
                          ...prev,
                          visible: e.target.checked,
                        }))
                      }
                      className="appearance-none cursor-pointer w-full h-full bg-red-100 rounded border-none focus:ring-0 checked:bg-emerald-500 transition-all duration-150 ease-in-out"
                    />

                    {productData.visible && (
                      <Check className="size-5 text-white absolute top-0 left-0 pointer-events-none" />
                    )}
                  </div>
                </div>
              </div>
              <div className="sticky bottom-0 bg-white py-4 flex items-center space-x-4">
                <button className="font-medium flex justify-center items-center border border-slate-300 w-full text-slate-700 px-4 py-3 rounded-md focus:outline-none hover:bg-slate-100 transition duration-100 ease-in-out cursor-pointer">
                  Cancel
                </button>
                <button
                  type="submit"
                  className="font-medium bg-teal-500 flex justify-center items-center w-full text-white px-4 py-3 rounded-md focus:outline-none cursor-pointer"
                >
                  Submit
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      {!isShowPopup && <FormDataPopUp />}
    </main>
  );
}
